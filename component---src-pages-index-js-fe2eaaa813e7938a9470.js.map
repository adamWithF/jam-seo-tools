{"version":3,"sources":["webpack:///./src/images/sponsors/devakimbo-logo.png","webpack:///./src/components/KeywordPicker/index.js","webpack:///./src/components/TextAnalyzer/index.js","webpack:///./src/components/Report/index.js","webpack:///./src/utils/TextUtils.js","webpack:///./src/components/Analysers/index.js","webpack:///./src/components/BlockOfText/index.js","webpack:///./src/components/Sponsors/index.js","webpack:///./src/components/MadeBy/index.js","webpack:///./src/pages/index.js","webpack:///./src/components/TwitterContact/index.js","webpack:///./src/images/adamfaryna-round.png","webpack:///./src/components/ExternalLink.js"],"names":["module","exports","KeywordPicker","title","instructions","onChange","name","placeholder","keywords","className","type","value","e","target","calcProgressWidth","num","max","result","TextAnalyzer","children","state","checkReadibility","countWords","length","lengthVerdict","readibility","tag","style","width","verdict","score","Report","status","Object","keys","map","key","idx","isNotEmpty","notEmptyVerdict","keywordsSaturation","i","stripPostContent","text","replace","extractSentences","trim","substring","split","countSyllabs","word","toLowerCase","match","extractWords","validateReadability","sentences","words","avgSentenceLength","Math","floor","totalSyllabsCount","reduce","acc","val","avgSylabsNumberPerWord","calculateReadibilityScore","validateTextLength","min","validateKeywordsInPostContent","filterKeywords","forEach","push","validateKeywordInPostContent","validateKeywordsInTitle","keyword","count","countKeywordInText","validateKeywordsInDescription","wordsNumber","ratio","round","Number","toFixed","regexp","RegExp","v","Array","from","Set","validateKeywords","initialState","PostMetaAnalyser","params","post","useStaticQuery","site","siteMetadata","useReducer","payload","Keywords","content","keywordsMin","Title","Description","titleMin","titleMax","descriptionMin","descriptionMax","postWordsMin","Error","window","getItem","sessionStorage","JSON","parse","createInitialState","dispatch","useEffect","setItem","stringify","cols","rows","BlockOfText","Sponsors","ExternalLink","href","alt","src","logoDevakimbo","MadeBy","contact","hash","url","adamfarynaImg","IndexPage","Layout","fontWeight","textDecoration","fontSize","frameBorder","allow","allowFullScreen","marginTop","Analysers","TwitterContact","twitterContact","rel"],"mappings":"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","file":"component---src-pages-index-js-fe2eaaa813e7938a9470.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/devakimbo-logo-83f61385472fbfadc8c8dee3a2669b6e.png\";","import React from \"react\"\n\nimport \"./style.scss\"\n\nconst KeywordPicker = ({\n  title,\n  instructions,\n  onChange,\n  name,\n  placeholder,\n  keywords = \"\",\n  className = \"\",\n}) => {\n  return (\n    <section className={`keyword-picker ${className}`}>\n      <h2>{title}</h2>\n      <p>{instructions}</p>\n      <input\n        className=\"keyword-picker\"\n        name={name}\n        type=\"text\"\n        placeholder={placeholder}\n        value={keywords}\n        onChange={e => onChange(e.target.value)}\n      />\n    </section>\n  )\n}\n\nexport default KeywordPicker\n","import React from \"react\"\n\nimport \"./style.scss\"\n\nfunction calcProgressWidth(num, max) {\n  const result = (num * 100) / max\n  return result < 100 ? result : 100\n}\n\nconst TextAnalyzer = ({\n  children,\n  title,\n  instructions,\n  state,\n  max,\n  className = \"\",\n  checkReadibility = false,\n  countWords = false,\n}) => {\n  const {length = 0, lengthVerdict, readibility} = state\n\n  return (\n    <section className={`text-analyzer ${className}`}>\n      <h2>{title}</h2>\n      <p>{instructions}</p>\n      {children}\n\n      <div className=\"progress\">\n        <div className={`progress-bar ${lengthVerdict.tag}`}>\n          <span style={{width: `${calcProgressWidth(length, max)}%`}}>\n            {length}\n          </span>\n        </div>\n        <div className=\"progress-info\">\n          {countWords ? \"Words\" : \"Characters\"} number:{\" \"}\n          <span className={`report-colored ${lengthVerdict.tag}`}>\n            {length} / {max} - {lengthVerdict.verdict}\n          </span>\n        </div>\n        {checkReadibility && (\n          <div className=\"read-score\">\n            Readibility score:{\" \"}\n            <span className={`report-colored ${readibility.tag}`}>\n              {readibility.score} / 100 - {readibility.verdict}{\" \"}\n              <span className=\"info\">\n                (i)\n                <span className=\"tooltip\">\n                  The best text should contain short sentences and words.\n                </span>\n              </span>\n            </span>\n          </div>\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default TextAnalyzer\n","import React, {Fragment} from \"react\"\n\nimport \"./style.scss\"\nimport {isNotEmpty} from \"../../utils/Utils\"\n\nconst Report = ({status}) => {\n  return (\n    <section className=\"report box\">\n      <h2>SEO Report</h2>\n      <p>What&apos;s good and bad about your current SEO.</p>\n      <ul>\n        {Object.keys(status).map((key, idx) => (\n          <Fragment key={`${idx}_${key}`}>\n            {isNotEmpty(status[key].notEmptyVerdict) && (\n              <li>\n                <span\n                  className={`report-colored ${status[key].notEmptyVerdict.tag}`}>\n                  {key}: {status[key].notEmptyVerdict.verdict}\n                </span>\n              </li>\n            )}\n            {isNotEmpty(status[key].lengthVerdict) && (\n              <li>\n                <span\n                  className={`report-colored ${status[key].lengthVerdict.tag}`}>\n                  {key}: {status[key].lengthVerdict.verdict}\n                </span>\n              </li>\n            )}\n            {isNotEmpty(status[key].readibility) &&\n              status[key].readibility.verdict !==\n                status[key].lengthVerdict?.verdict && (\n                <li>\n                  <span\n                    className={`report-colored ${status[key].readibility.tag}`}>\n                    {key}: {status[key].readibility.verdict}\n                  </span>\n                </li>\n              )}\n            {status[key].keywordsSaturation &&\n              status[key].keywordsSaturation.map((i, idx) => (\n                <li key={`${idx}_${key}_${idx}`}>\n                  <span className={`report-colored ${i.tag}`}>\n                    {key} keyword: {i.verdict}\n                  </span>\n                </li>\n              ))}\n          </Fragment>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Report\n","export const calculateReadibilityScore = text => {\n  if (!text.length) {\n    return 0\n  }\n\n  text = stripPostContent(text)\n\n  const sentences = extractSentences(text)\n  const words = extractWords(text)\n  const avgSentenceLength = Math.floor(words.length / sentences.length)\n  const totalSyllabsCount = words.reduce(\n    (acc, val) => acc + countSyllabs(val),\n    0\n  )\n  const avgSylabsNumberPerWord = Math.floor(totalSyllabsCount / words.length)\n\n  let result = Math.floor(\n    206.835 - 1.015 * avgSentenceLength - 84.6 * avgSylabsNumberPerWord\n  )\n\n  if (result < 0) {\n    result = 0\n  } else if (result > 100) {\n    result = 100\n  }\n\n  return result\n}\n\nexport const stripPostContent = text => {\n  text = text.replace(/^#.*$/gim, \"\") // remove all headings (because they don't have a dot)\n  text = text.replace(/^\\|.*$/gim, \"\") // remove tables\n  text = text.replace(/!?\\[(.+)\\]\\(.*\\)\\.?/gi, \"$1.\") // extract names from images\n\n  text = text.replace(/^\\s*(\\d+\\.|[\\-\\+\\*]).*$/gim, \"\") // remove numerated, list content\n  text = text.replace(/<!--[\\s\\S]*-->/gim, \"\") // remove HTML comments\n  text = text.replace(/^\\s*\\[.+\\]:.+$/gim, \"\") // remove reference-style links\n  text = text.replace(/\\[(.+)\\]\\[.+\\]/gi, \"$1\") // remove reference-style links\n  text = text.replace(/{[\\s\\S]+?\\}/gi, \"\") // remove snippets\n  text = text.replace(/^```[\\s\\S]*?```/gim, \"\") // remove code blocks\n  text = text.replace(/>.*$/gim, \"\") // remove quotes/citations\n  text = text.replace(/\\[(.+?)\\](?:.*)(\\.)?/gi, \"$1$2\") // replace link with link text\n  text = text.replace(/`(.+?)`/gi, \"X\") // remove code in thicked text\n\n  text = text.replace(/^\\*+|[_=-]{2,}$/gim, \"\")\n  text = text.replace(/^ {2,}.+$/gim, \"\")\n  text = text.replace(/^\\s*$(?:\\r\\n?|\\n)/gm, \"\") // remove empty lines\n  text = text.replace(/(?:\\r\\n?|\\n)/gm, \" \") // remove new lines\n  text = text.replace(/ {2,}$/gi, \" \") // replace multiple spaces with single one\n  text = text.replace(/(\\w)([.?!):])(\\w)/gi, \"$1$2 $3\") // replace multiple spaces with single one\n  return text\n}\n\nexport const extractSentences = text => {\n  if (!text.length) {\n    return []\n  }\n\n  text = text.trim()\n\n  if (text[text.length - 1] === \".\") {\n    text = text.substring(0, text.length - 1)\n  }\n\n  return text.split(\". \")\n}\n\nexport const countSyllabs = word => {\n  if (!word.length) {\n    return 0\n  }\n\n  word = word.trim()\n  word = word.toLowerCase()\n  word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, \"\")\n  word = word.replace(/^y/, \"\")\n  const result = word.match(/[aeiouy]{1,2}/g)\n  return result ? result.length : 1\n}\n\nexport const extractWords = text => {\n  if (!text.length) {\n    return []\n  }\n\n  text = text.replace(/(^\\s*)|(\\s*$)/gi, \"\")\n  text = text.replace(/[ ]{2,}/gi, \" \")\n  text = text.replace(/\\n /, \"\\n\")\n  return text.split(\" \")\n}\n\nexport const countWords = text => extractWords(text).length\n\nexport const validateReadability = text => {\n  if (!text.length) {\n    return {\n      score: 0,\n      tag: \"empty\",\n      verdict: \"Field is empty, please fill it\",\n    }\n  }\n\n  const score = calculateReadibilityScore(text)\n\n  if (score >= 90 && score <= 100) {\n    return {\n      score,\n      tag: \"ok\",\n      verdict: \"Super easy to read\",\n    }\n  } else if (score >= 80 && score <= 89) {\n    return {\n      score,\n      tag: \"ok\",\n      verdict: \"East to read\",\n    }\n  } else if (score >= 70 && score <= 79) {\n    return {\n      score,\n      tag: \"ok\",\n      verdict: \"Fairly easy to read\",\n    }\n  } else if (score >= 60 && score <= 69) {\n    return {\n      score,\n      tag: \"ok\",\n      verdict: \"Standard readability\",\n    }\n  } else if (score >= 50 && score <= 59) {\n    return {\n      score,\n      tag: \"warn\",\n      verdict: \"Fairly difficult to read\",\n    }\n  } else if (score >= 30 && score <= 49) {\n    return {\n      score,\n      tag: \"error\",\n      verdict: \"Difficult to read\",\n    }\n  }\n\n  return {\n    score,\n    tag: \"error\",\n    verdict: \"Very confusing to read\",\n  }\n}\n\nexport const validateTextLength = (length, min, max = null) => {\n  if (length === 0) {\n    return {\n      tag: \"empty\",\n      verdict: \"Field is empty, please fill it\",\n    }\n  } else if (length < min) {\n    return {\n      tag: \"error\",\n      verdict: \"Too short\",\n    }\n  } else if (max && length > max) {\n    return {\n      tag: \"error\",\n      verdict: \"Too long\",\n    }\n  } else {\n    return {\n      tag: \"ok\",\n      verdict: \"Length is good\",\n    }\n  }\n}\n\nexport const validateKeywordInTitle = (keyword, title) => {\n  const count = countKeywordInText(keyword, title)\n\n  if (count === 0) {\n    return {\n      tag: \"warn\",\n      verdict: `'${keyword}' is not present in the title`,\n    }\n  } else if (count === 1) {\n    return {\n      tag: \"ok\",\n      verdict: `'${keyword}' is present in the title`,\n    }\n  }\n\n  return {\n    tag: \"warn\",\n    verdict: `'${keyword}' occurs too many times it the title`,\n  }\n}\n\nexport const validateKeywordInDescription = (keyword, title) => {\n  const count = countKeywordInText(keyword, title)\n\n  if (count === 0) {\n    return {\n      tag: \"warn\",\n      verdict: `'${keyword}' is not present in the description`,\n    }\n  } else if (count === 1 || count === 2) {\n    return {\n      tag: \"ok\",\n      verdict: `'${keyword}' is present in the description`,\n    }\n  }\n\n  return {\n    tag: \"error\",\n    verdict: `'${keyword}' occurs too many times it the description`,\n  }\n}\n\nexport const validateKeywordsInPostContent = (keywords, text) => {\n  keywords = filterKeywords(keywords)\n  text = stripPostContent(text)\n\n  if (!keywords.length || !text.length) {\n    return []\n  }\n\n  const result = []\n  keywords.forEach(i => {\n    result.push(validateKeywordInPostContent(i, text))\n  })\n\n  return result\n}\n\nexport const validateKeywordsInTitle = (keywords, text) => {\n  keywords = filterKeywords(keywords)\n\n  if (!keywords.length || !text.length) {\n    return []\n  }\n\n  const result = []\n  keywords.forEach(i => {\n    result.push(validateKeywordInTitle(i, text))\n  })\n\n  return result\n}\nexport const validateKeywordsInDescription = (keywords, text) => {\n  keywords = filterKeywords(keywords)\n\n  if (!keywords.length || !text.length) {\n    return []\n  }\n\n  const result = []\n  keywords.forEach(i => {\n    result.push(validateKeywordInDescription(i, text))\n  })\n\n  return result\n}\n\nexport const validateKeywordInPostContent = (keyword, text) => {\n  text = text.replace(/^#.*$/gi, \"\")\n  text = text.replace(/^```[\\s\\S]*?```/gim, \"\")\n  const count = countKeywordInText(keyword, text)\n\n  if (count === 0) {\n    return {\n      tag: \"error\",\n      verdict: `'${keyword}' is not present in the post`,\n    }\n  }\n\n  const wordsNumber = countWords(text)\n  let ratio = Math.round(Number(count / wordsNumber).toFixed(2) * 100)\n\n  if (ratio <= 1) {\n    return {\n      tag: \"warn\",\n      verdict: `'${keyword}' saturation is low ${ratio}%`,\n    }\n  } else if (ratio <= 4.5) {\n    return {\n      tag: \"ok\",\n      verdict: `'${keyword}' saturation is good ${ratio}%`,\n    }\n  }\n\n  return {\n    tag: \"error\",\n    verdict: `'${keyword}' saturation is too high ${ratio}%`,\n  }\n}\n\n/**\n * Every keyword should be present in at least one heading.\n */\nexport const validateKeywordInPostContentHeadings = (keyword, text) => {\n  const headings = extractMarkdownHeadings(text)\n  const regexp = RegExp(keyword, \"gi\")\n  const count = headings.reduce(\n    (acc, val) => acc + (val.match(regexp) || []).length,\n    0\n  )\n\n  if (count === 0) {\n    return {\n      tag: \"warn\",\n      verdict: `'${keyword}' not occur in any post headings`,\n    }\n  }\n\n  return {\n    tag: \"ok\",\n    verdict: `'${keyword}' occur some post headings`,\n  }\n}\n\nexport const extractMarkdownHeadings = text => {\n  const regexp = RegExp(\"#.*\", \"g\")\n  const result = []\n\n  for (const match of text.matchAll(regexp)) {\n    result.push(match[0])\n  }\n\n  return result\n}\n\nexport const countKeywordInText = (keyword, text) => {\n  const regexp = new RegExp(`( |^)${keyword}[. ]?`, \"gi\")\n  return (text.match(regexp) || []).length\n}\n\nexport const filterKeywords = keywords => {\n  keywords = keywords\n    .trim()\n    .split(\",\")\n    .reduce((acc, val) => {\n      const v = val.trim().toLowerCase()\n      if (v.length) {\n        acc.push(v)\n      }\n\n      return acc\n    }, [])\n\n  return Array.from(new Set(keywords))\n}\n\nexport const validateKeywords = (keywords, min) => {\n  if (!keywords.length) {\n    return {\n      tag: \"empty\",\n      verdict: \"Field is empty, please fill it\",\n    }\n  }\n\n  keywords = filterKeywords(keywords)\n\n  if (keywords.length < min) {\n    return {\n      tag: \"warn\",\n      verdict: `You choose too few keywords ${keywords.length}. Try to generate about 5-15 (or more) unique keywords.`,\n    }\n  }\n\n  return {\n    tag: \"ok\",\n    verdict: `You choose good number of keywords '${keywords.length}' keywords.`,\n  }\n}\n","import React, {useEffect, useReducer} from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\nimport \"./style.scss\"\nimport KeywordPicker from \"../KeywordPicker\"\nimport TextAnalyzer from \"../TextAnalyzer\"\nimport Report from \"../Report\"\nimport {\n  countWords,\n  validateReadability,\n  validateTextLength,\n  validateKeywords,\n  validateKeywordsInTitle,\n  validateKeywordsInDescription,\n  validateKeywordsInPostContent,\n} from \"../../utils/TextUtils\"\n\nlet initialState = null\n\nfunction createInitialState(params) {\n  if (!initialState) {\n    const sessionStorage =\n      typeof window === \"undefined\"\n        ? {getItem: () => \"\"}\n        : window.sessionStorage\n    const state = sessionStorage.getItem(\"analysers-state\")\n\n    if (state) {\n      initialState = JSON.parse(state)\n    } else {\n      initialState = {\n        Keywords: {\n          content: \"\",\n          notEmptyVerdict: validateKeywords(\"\", params.keywordsMin),\n        },\n        Title: {\n          content: \"\",\n          length: 0,\n          lengthVerdict: validateTextLength(\n            0,\n            params.titleMin,\n            params.titleMax\n          ),\n          keywordsSaturation: validateKeywordsInTitle(\"\", \"\"),\n        },\n        Description: {\n          content: \"\",\n          length: 0,\n          lengthVerdict: validateTextLength(\n            0,\n            params.descriptionMin,\n            params.descriptionMax\n          ),\n          keywordsSaturation: validateKeywordsInDescription(\"\", \"\"),\n          readibility: validateReadability(\"\"),\n        },\n        \"Post content\": {\n          content: \"\",\n          length: 0,\n          lengthVerdict: validateTextLength(0, params.postWordsMin),\n          keywordsSaturation: validateKeywordsInPostContent(\"\", \"\"),\n          readibility: validateReadability(\"\"),\n        },\n      }\n    }\n  }\n\n  return initialState\n}\n\nfunction createReducer(params) {\n  return (state, {type, payload}) => {\n    switch (type) {\n      case \"updateKeywords\":\n        return {\n          ...state,\n          Keywords: {\n            content: payload,\n            notEmptyVerdict: validateKeywords(payload, params.keywordsMin),\n          },\n          Title: {\n            ...state.Title,\n            keywordsSaturation: validateKeywordsInTitle(\n              payload,\n              state.Title.content\n            ),\n          },\n          Description: {\n            ...state.Description,\n            keywordsSaturation: validateKeywordsInDescription(\n              payload,\n              state.Description.content\n            ),\n          },\n          \"Post content\": {\n            ...state[\"Post content\"],\n            keywordsSaturation: validateKeywordsInPostContent(\n              payload,\n              state[\"Post content\"].content\n            ),\n          },\n        }\n      case \"updateTitle\":\n        return {\n          ...state,\n          Title: {\n            content: payload,\n            length: payload.length,\n            lengthVerdict: validateTextLength(\n              payload.length,\n              params.titleMin,\n              params.titleMax\n            ),\n            keywordsSaturation: validateKeywordsInTitle(\n              state.Keywords.content,\n              payload\n            ),\n          },\n        }\n      case \"updateDescription\":\n        return {\n          ...state,\n          Description: {\n            content: payload,\n            length: payload.length,\n            lengthVerdict: validateTextLength(\n              payload.length,\n              params.descriptionMin,\n              params.descriptionMax\n            ),\n            keywordsSaturation: validateKeywordsInDescription(\n              state.Keywords.content,\n              payload\n            ),\n            readibility: validateReadability(payload),\n          },\n        }\n      case \"updateContent\":\n        return {\n          ...state,\n          \"Post content\": {\n            content: payload,\n            length: countWords(payload),\n            lengthVerdict: validateTextLength(\n              countWords(payload),\n              params.postWordsMin\n            ),\n            keywordsSaturation: validateKeywordsInPostContent(\n              state.Keywords.content,\n              payload\n            ),\n            readibility: validateReadability(payload),\n          },\n        }\n      default:\n        throw new Error()\n    }\n  }\n}\n\nconst PostMetaAnalyser = () => {\n  const {\n    site: {\n      siteMetadata: {post},\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          post {\n            descriptionMax\n            titleMax\n            titleMin\n            descriptionMin\n            postWordsMin\n            keywordsMin\n          }\n        }\n      }\n    }\n  `)\n\n  const [state, dispatch] = useReducer(\n    createReducer(post),\n    createInitialState(post)\n  )\n\n  useEffect(() => {\n    sessionStorage.setItem(\"analysers-state\", JSON.stringify(state))\n  })\n\n  return (\n    <section className=\"analysers\">\n      <div className=\"row\">\n        <div className=\"column column-50\">\n          <form>\n            <KeywordPicker\n              title=\"Keywords\"\n              instructions=\"The list of unique 5-15 keywords (or more) you want to target in your post. Separate keywords by the comma.\"\n              name=\"Keywords\"\n              keywords={state.Keywords.content}\n              placeholder=\"Enter in a keywords\"\n              onChange={value =>\n                dispatch({type: \"updateKeywords\", payload: value})\n              }\n              className=\"box\"\n            />\n\n            <TextAnalyzer\n              title=\"Post Title\"\n              instructions=\"Copy & Paste your post title below or type it there.\"\n              state={state.Title}\n              max={post.titleMax}\n              className=\"box\">\n              <textarea\n                name=\"title\"\n                cols=\"30\"\n                rows=\"5\"\n                value={state.Title.content}\n                placeholder=\"Enter in a post title\"\n                onChange={e =>\n                  dispatch({type: \"updateTitle\", payload: e.target.value})\n                }\n              />\n            </TextAnalyzer>\n\n            <TextAnalyzer\n              title=\"Post Description\"\n              instructions=\"Copy & Paste your post description below or type it there.\"\n              state={state.Description}\n              max={post.descriptionMax}\n              checkReadibility={true}\n              className=\"box\">\n              <textarea\n                name=\"description\"\n                cols=\"30\"\n                rows=\"5\"\n                value={state.Description.content}\n                placeholder=\"Enter in a post description\"\n                onChange={e =>\n                  dispatch({\n                    type: \"updateDescription\",\n                    payload: e.target.value,\n                  })\n                }\n              />\n            </TextAnalyzer>\n\n            <TextAnalyzer\n              title=\"Post Content\"\n              instructions=\"Copy & Paste your post content below or type it there. Post analyser recognisez markdown semantic, so you can copy your post in markdown.\"\n              state={state[\"Post content\"]}\n              max={post.postWordsMin}\n              countWords={true}\n              checkReadibility={true}\n              className=\"box\">\n              <textarea\n                name=\"content\"\n                cols=\"30\"\n                rows=\"10\"\n                value={state[\"Post content\"].content}\n                placeholder=\"Enter in a post content\"\n                onChange={e =>\n                  dispatch({type: \"updateContent\", payload: e.target.value})\n                }\n              />\n            </TextAnalyzer>\n          </form>\n        </div>\n        <div className=\"column column-offset-5 column-45 \">\n          <Report status={state} />\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default PostMetaAnalyser\n","import React from \"react\"\n\nconst BlockOfText = ({title, children, className = \"\"}) => {\n  return (\n    <section className={`block-of-text ${className}`}>\n      <header>\n        <h2>{title}</h2>\n      </header>\n      {children}\n    </section>\n  )\n}\n\nexport default BlockOfText\n","import React from \"react\"\n\nimport \"./style.scss\"\nimport logoDevakimbo from \"../../images/sponsors/devakimbo-logo.png\"\nimport ExternalLink from \"../ExternalLink\"\n\nconst Sponsors = () => {\n  return (\n    <section className=\"sponsors\">\n      <header>\n        <h2>Our Sponsors</h2>\n      </header>\n      <ul>\n        <li>\n          <ExternalLink href=\"https://devakimbo.com/\" title=\"DEV Akimbo\">\n            <img alt=\"Logo of DEV Akimbo\" src={logoDevakimbo} />\n          </ExternalLink>\n        </li>\n      </ul>\n    </section>\n  )\n}\n\nexport default Sponsors\n","import React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\nimport \"./style.scss\"\nimport adamfarynaImg from \"../../images/adamfaryna-round.png\"\nimport ExternalLink from \"../ExternalLink\"\n\nconst MadeBy = () => {\n  const {\n    site: {\n      siteMetadata: {\n        contact: {hash, name, url},\n      },\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          contact {\n            hash\n            name\n            url\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <section className=\"made-by\">\n      <ExternalLink href={url} title={name}>\n        <img alt={`Photo of ${name}`} src={adamfarynaImg} />\n      </ExternalLink>\n      <p>\n        Made by{\" \"}\n        <ExternalLink href={url} title={name}>\n          {name}\n        </ExternalLink>\n      </p>\n    </section>\n  )\n}\n\nexport default MadeBy\n","import React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport Analysers from \"../components/Analysers\"\nimport BlockOfText from \"../components/BlockOfText\"\nimport Sponsors from \"../components/Sponsors\"\nimport MadeBy from \"../components/MadeBy\"\nimport TwitterContact from \"../components/TwitterContact\"\n\nconst IndexPage = () => {\n  const {\n    site: {\n      siteMetadata: {title},\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <Layout title=\"Home\">\n      <h1>{title}</h1>\n      <section className=\"introduction\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <p>\n              The {title} is a set of complementary SEO tools for JAMstack\n              powered blogs <span className=\"emoji\">🔥</span> If you choose\n              JAMstack over a popular CMS for your blogging platform, you\n              probably already found that some essential SEO tools are missing{\" \"}\n              <span className=\"emoji\">🤦</span> This website brings a{\" \"}\n              <span style={{fontWeight: 600, textDecoration: \"underline\"}}>\n                set of powerful SEO tools for FREE\n              </span>{\" \"}\n              to fill this gap <span className=\"emoji\">🙌</span>\n              <br />\n              <br />\n              Use the tools below to optimize the SEO of your blog posts'\n              content, titles, and descriptions. When you will be happy with the\n              results, just copy values from the fields into your blog post.\n              Done, your post is ready to launch{\" \"}\n              <span className=\"emoji\">🚀</span>\n            </p>\n          </div>\n        </div>\n      </section>\n      <section className=\"instructions\">\n        <div className=\"row\">\n          <div className=\"column\">\n            <h2>Optimize SEO of your blog posts in 8 easy steps</h2>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"column column-55\">\n            <p>Watch the video on the right or follow the step below.</p>\n            <ol>\n              <li>Open markdown file with your blog post</li>\n              <li>\n                Copy & paste post title from frontmatter into Post Title field\n              </li>\n              <li>\n                Copy & paste post description from frontmatter into the Post\n                Description field\n              </li>\n              <li>Copy & paste post content into the Post Content field</li>\n              <li>\n                Type in keywords that you want your post to target into the\n                Keywords field\n              </li>\n              <li>\n                Check status below every filled field and SEO report column\n              </li>\n              <li>\n                Fix all the <span className=\"red\">errors</span> and{\" \"}\n                <span className=\"blue\">empty</span> to perfect{\" \"}\n                <span className=\"green\">green</span> (or close) report\n              </li>\n              <li>Copy and paste values from fields to your markdown file</li>\n            </ol>\n            <p style={{fontWeight: \"bold\", fontSize: \"20px\"}}>DONE!</p>\n          </div>\n          <div className=\"column column-offset-5 column-40\">\n            <iframe\n              src=\"https://www.youtube.com/embed/L3LYmyFA2Lg\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen></iframe>\n          </div>\n        </div>\n        <div className=\"row\" style={{marginTop: \"30px\"}}>\n          <div className=\"column\">\n            <p>\n              You can also use this website to create SEO optimized post from\n              scratch. Just start filling all the fields, and copy the values to\n              the markdown file afterward.\n            </p>\n          </div>\n        </div>\n      </section>\n      <Analysers />\n      <section>\n        <div className=\"row\">\n          <div className=\"column column-50\">\n            <BlockOfText title=\"About\" className=\"about\">\n              <p>\n                Hi, my name is Adam Faryna. I started the JAM SEO tools project\n                out of frustration, I experienced after I moved{\" \"}\n                <a href=\"https://devakimbo.com\" target=\"_blank\">\n                  my blog\n                </a>{\" \"}\n                from WordPress to JAMstack. While WP offers many SEO plugins\n                that are extremely useful for anyone who blogs, I couldn’t find\n                any similar solution for JAMstack. That’s how the idea of JAM\n                SEO tools have born.\n              </p>\n              <p>\n                I will add more tools and features over time. If you have a\n                feature-request drop me a message at <TwitterContact />.\n              </p>\n              <p>\n                If you want to become a sponsor of this project drop me a\n                message at <TwitterContact />.\n              </p>\n            </BlockOfText>\n          </div>\n          <div className=\"column column-50 \">\n            <Sponsors />\n          </div>\n        </div>\n      </section>\n      <MadeBy />\n    </Layout>\n  )\n}\n\nexport default IndexPage\n","import React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\nimport ExternalLink from \"../ExternalLink\"\n\nconst TwitterContact = ({title = \"Twitter\"}) => {\n  const {\n    site: {\n      siteMetadata: {twitterContact},\n    },\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          twitterContact\n        }\n      }\n    }\n  `)\n\n  return <ExternalLink href={twitterContact} title={title} />\n}\n\nexport default TwitterContact\n","module.exports = __webpack_public_path__ + \"static/adamfaryna-round-0598365b281083d9643179272fe1414d.png\";","import React from \"react\"\n\nconst ExternalLink = ({href, title, children, className = \"\"}) => {\n  if (!children) {\n    children = <span>{title}</span>\n  }\n\n  return (\n    <a\n      href={href}\n      title={title}\n      className={className}\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">\n      {children}\n    </a>\n  )\n}\n\nexport default ExternalLink\n"],"sourceRoot":""}